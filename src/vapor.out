

const methods_Visitor
  :Visitor.visit

const methods_Tree
  :Tree.Init
  :Tree.SetRight
  :Tree.SetLeft
  :Tree.GetRight
  :Tree.GetLeft
  :Tree.GetKey
  :Tree.SetKey
  :Tree.GetHas_Right
  :Tree.GetHas_Left
  :Tree.SetHas_Left
  :Tree.SetHas_Right
  :Tree.Compare
  :Tree.Insert
  :Tree.Delete
  :Tree.Remove
  :Tree.RemoveRight
  :Tree.RemoveLeft
  :Tree.Search
  :Tree.Print
  :Tree.RecPrint
  :Tree.accept

const methods_MyVisitor
  :MyVisitor.visit

const methods_TV
  :TV.Start

func Main()
  t.0 = HeapAllocZ(4)
  [t.0+0] = :methods_TV
  if t.0 goto :null0
    Error("null pointer")
  null0:
  t.1 = t.0

  t.2 = [t.1+0]
  t.3 = [t.2+0]
  t.4 = call t.3(t.1)
  PrintIntS(t.4)
  ret

func TV.Start(this )

  t.0 = HeapAllocZ(28)
  [t.0+0] = :methods_Tree
  if t.0 goto :null1
    Error("null pointer")
  null1:
  t.1 = t.0
  root = t.1
  t.2 = root
  t.3 = 16
  t.4 = [t.2+0]
  t.5 = [t.4+0]
  t.6 = call t.5(t.2 t.3)
  ntb = t.6
  t.7 = root

  t.8 = [t.7+0]
  t.9 = [t.8+72]
  t.10 = call t.9(t.7)
  ntb = t.10
  t.11 = 100000000
  PrintIntS(t.11)
  t.12 = root
  t.13 = 8
  t.14 = [t.12+0]
  t.15 = [t.14+48]
  t.16 = call t.15(t.12 t.13)
  ntb = t.16
  t.17 = root
  t.18 = 24
  t.19 = [t.17+0]
  t.20 = [t.19+48]
  t.21 = call t.20(t.17 t.18)
  ntb = t.21
  t.22 = root
  t.23 = 4
  t.24 = [t.22+0]
  t.25 = [t.24+48]
  t.26 = call t.25(t.22 t.23)
  ntb = t.26
  t.27 = root
  t.28 = 12
  t.29 = [t.27+0]
  t.30 = [t.29+48]
  t.31 = call t.30(t.27 t.28)
  ntb = t.31
  t.32 = root
  t.33 = 20
  t.34 = [t.32+0]
  t.35 = [t.34+48]
  t.36 = call t.35(t.32 t.33)
  ntb = t.36
  t.37 = root
  t.38 = 28
  t.39 = [t.37+0]
  t.40 = [t.39+48]
  t.41 = call t.40(t.37 t.38)
  ntb = t.41
  t.42 = root
  t.43 = 14
  t.44 = [t.42+0]
  t.45 = [t.44+48]
  t.46 = call t.45(t.42 t.43)
  ntb = t.46
  t.47 = root

  t.48 = [t.47+0]
  t.49 = [t.48+72]
  t.50 = call t.49(t.47)
  ntb = t.50
  t.51 = 100000000
  PrintIntS(t.51)
  t.52 = HeapAllocZ(12)
  [t.52+0] = :methods_MyVisitor
  if t.52 goto :null2
    Error("null pointer")
  null2:
  t.53 = t.52
  v = t.53
  t.54 = 50000000
  PrintIntS(t.54)
  t.55 = root
  t.56 = v
  t.57 = [t.55+0]
  t.58 = [t.57+80]
  t.59 = call t.58(t.55 t.56)
  nti = t.59
  t.60 = 100000000
  PrintIntS(t.60)
  t.61 = root
  t.62 = 24
  t.63 = [t.61+0]
  t.64 = [t.63+68]
  t.65 = call t.64(t.61 t.62)
  PrintIntS(t.65)
  t.66 = root
  t.67 = 12
  t.68 = [t.66+0]
  t.69 = [t.68+68]
  t.70 = call t.69(t.66 t.67)
  PrintIntS(t.70)
  t.71 = root
  t.72 = 16
  t.73 = [t.71+0]
  t.74 = [t.73+68]
  t.75 = call t.74(t.71 t.72)
  PrintIntS(t.75)
  t.76 = root
  t.77 = 50
  t.78 = [t.76+0]
  t.79 = [t.78+68]
  t.80 = call t.79(t.76 t.77)
  PrintIntS(t.80)
  t.81 = root
  t.82 = 12
  t.83 = [t.81+0]
  t.84 = [t.83+68]
  t.85 = call t.84(t.81 t.82)
  PrintIntS(t.85)
  t.86 = root
  t.87 = 12
  t.88 = [t.86+0]
  t.89 = [t.88+52]
  t.90 = call t.89(t.86 t.87)
  ntb = t.90
  t.91 = root

  t.92 = [t.91+0]
  t.93 = [t.92+72]
  t.94 = call t.93(t.91)
  ntb = t.94
  t.95 = root
  t.96 = 12
  t.97 = [t.95+0]
  t.98 = [t.97+68]
  t.99 = call t.98(t.95 t.96)
  PrintIntS(t.99)
  t.100 = 0
  ret t.100

func Tree.Init(this v_key)

  t.0 = v_key
  [this+12] = t.0
  t.1 = 0
  [this+16] = t.1
  t.2 = 0
  [this+20] = t.2
  t.3 = 1
  ret t.3
func Tree.SetRight(this rn)

  t.0 = rn
  [this+8] = t.0
  t.1 = 1
  ret t.1
func Tree.SetLeft(this ln)

  t.0 = ln
  [this+4] = t.0
  t.1 = 1
  ret t.1
func Tree.GetRight(this )

  t.0 = [this+8]
  ret t.0
func Tree.GetLeft(this )

  t.0 = [this+4]
  ret t.0
func Tree.GetKey(this )

  t.0 = [this+12]
  ret t.0
func Tree.SetKey(this v_key)

  t.0 = v_key
  [this+12] = t.0
  t.1 = 1
  ret t.1
func Tree.GetHas_Right(this )

  t.0 = [this+20]
  ret t.0
func Tree.GetHas_Left(this )

  t.0 = [this+16]
  ret t.0
func Tree.SetHas_Left(this val)

  t.0 = val
  [this+16] = t.0
  t.1 = 1
  ret t.1
func Tree.SetHas_Right(this val)

  t.0 = val
  [this+20] = t.0
  t.1 = 1
  ret t.1
func Tree.Compare(this num1 num2)

  t.0 = 0
  ntb = t.0
  t.1 = num2
  t.2 = 1
  t.3 = Add(t.1 t.2)
  nti = t.3
  t.4 = num1
  t.5 = num2
  t.6 = LtS(t.4 t.5)
  if0 t.6 goto :else1
    t.7 = 0
    ntb = t.7
    goto :else_end1
  else1:
    t.8 = num1
    t.9 = nti
    t.10 = LtS(t.8 t.9)
    t.11 = Sub(1 t.10)
    if0 t.11 goto :else0
      t.12 = 0
      ntb = t.12
      goto :else_end0
    else0:
      t.13 = 1
      ntb = t.13
    else_end0:
  else_end1:
  t.14 = ntb
  ret t.14
func Tree.Insert(this v_key)

  t.0 = HeapAllocZ(28)
  [t.0+0] = :methods_Tree
  if t.0 goto :null3
    Error("null pointer")
  null3:
  t.1 = t.0
  new_node = t.1
  t.2 = new_node
  t.3 = v_key
  t.4 = [t.2+0]
  t.5 = [t.4+0]
  t.6 = call t.5(t.2 t.3)
  ntb = t.6
  t.7 = this
  current_node = t.7
  t.8 = 1
  cont = t.8
  while0_top:
    t.9 = cont
    if0 t.9 goto :else5

      t.10 = current_node

      t.11 = [t.10+0]
      t.12 = [t.11+20]
      t.13 = call t.12(t.10)
      key_aux = t.13
      t.14 = v_key
      t.15 = key_aux
      t.16 = LtS(t.14 t.15)
      if0 t.16 goto :else4

        t.17 = current_node

        t.18 = [t.17+0]
        t.19 = [t.18+32]
        t.20 = call t.19(t.17)
        if0 t.20 goto :else2
          t.21 = current_node

          t.22 = [t.21+0]
          t.23 = [t.22+16]
          t.24 = call t.23(t.21)
          current_node = t.24
          goto :else_end2
        else2:

          t.25 = 0
          cont = t.25
          t.26 = current_node
          t.27 = 1
          t.28 = [t.26+0]
          t.29 = [t.28+36]
          t.30 = call t.29(t.26 t.27)
          ntb = t.30
          t.31 = current_node
          t.32 = new_node
          t.33 = [t.31+0]
          t.34 = [t.33+8]
          t.35 = call t.34(t.31 t.32)
          ntb = t.35
        else_end2:
        goto :else_end4
      else4:

        t.36 = current_node

        t.37 = [t.36+0]
        t.38 = [t.37+28]
        t.39 = call t.38(t.36)
        if0 t.39 goto :else3
          t.40 = current_node

          t.41 = [t.40+0]
          t.42 = [t.41+12]
          t.43 = call t.42(t.40)
          current_node = t.43
          goto :else_end3
        else3:

          t.44 = 0
          cont = t.44
          t.45 = current_node
          t.46 = 1
          t.47 = [t.45+0]
          t.48 = [t.47+40]
          t.49 = call t.48(t.45 t.46)
          ntb = t.49
          t.50 = current_node
          t.51 = new_node
          t.52 = [t.50+0]
          t.53 = [t.52+4]
          t.54 = call t.53(t.50 t.51)
          ntb = t.54
        else_end3:
      else_end4:
      goto :else_end5
    else5:
      goto :while0_end
    else_end5:
    goto :while0_top
  while0_end:
  t.55 = 1
  ret t.55
func Tree.Delete(this v_key)

  t.0 = this
  current_node = t.0
  t.1 = this
  parent_node = t.1
  t.2 = 1
  cont = t.2
  t.3 = 0
  found = t.3
  t.4 = 1
  is_root = t.4
  while1_top:
    t.5 = cont
    if0 t.5 goto :else13

      t.6 = current_node

      t.7 = [t.6+0]
      t.8 = [t.7+20]
      t.9 = call t.8(t.6)
      key_aux = t.9
      t.10 = v_key
      t.11 = key_aux
      t.12 = LtS(t.10 t.11)
      if0 t.12 goto :else12
        t.13 = current_node

        t.14 = [t.13+0]
        t.15 = [t.14+32]
        t.16 = call t.15(t.13)
        if0 t.16 goto :else6

          t.17 = current_node
          parent_node = t.17
          t.18 = current_node

          t.19 = [t.18+0]
          t.20 = [t.19+16]
          t.21 = call t.20(t.18)
          current_node = t.21
          goto :else_end6
        else6:
          t.22 = 0
          cont = t.22
        else_end6:
        goto :else_end12
      else12:
        t.23 = key_aux
        t.24 = v_key
        t.25 = LtS(t.23 t.24)
        if0 t.25 goto :else11
          t.26 = current_node

          t.27 = [t.26+0]
          t.28 = [t.27+28]
          t.29 = call t.28(t.26)
          if0 t.29 goto :else7

            t.30 = current_node
            parent_node = t.30
            t.31 = current_node

            t.32 = [t.31+0]
            t.33 = [t.32+12]
            t.34 = call t.33(t.31)
            current_node = t.34
            goto :else_end7
          else7:
            t.35 = 0
            cont = t.35
          else_end7:
          goto :else_end11
        else11:

          t.36 = is_root
          if0 t.36 goto :else10
            t.37 = current_node

            t.38 = [t.37+0]
            t.39 = [t.38+28]
            t.40 = call t.39(t.37)
            t.41 = Sub(1 t.40)
            t.42 = current_node

            t.43 = [t.42+0]
            t.44 = [t.43+32]
            t.45 = call t.44(t.42)
            t.46 = Sub(1 t.45)
            if0 t.41 goto :else8
              t.47 = t.46
              goto :else_end8
            else8:
              t.47 = 0
            else_end8:
            t.47 = t.47
            if0 t.47 goto :else9
              t.48 = 1
              ntb = t.48
              goto :else_end9
            else9:
              t.49 = this
              t.50 = parent_node
              t.51 = current_node
              t.52 = [t.49+0]
              t.53 = [t.52+56]
              t.54 = call t.53(t.49 t.50 t.51)
              ntb = t.54
            else_end9:
            goto :else_end10
          else10:
            t.55 = this
            t.56 = parent_node
            t.57 = current_node
            t.58 = [t.55+0]
            t.59 = [t.58+56]
            t.60 = call t.59(t.55 t.56 t.57)
            ntb = t.60
          else_end10:
          t.61 = 1
          found = t.61
          t.62 = 0
          cont = t.62
        else_end11:
      else_end12:
      t.63 = 0
      is_root = t.63
      goto :else_end13
    else13:
      goto :while1_end
    else_end13:
    goto :while1_top
  while1_end:
  t.64 = found
  ret t.64
func Tree.Remove(this p_node c_node)

  t.0 = c_node

  t.1 = [t.0+0]
  t.2 = [t.1+32]
  t.3 = call t.2(t.0)
  if0 t.3 goto :else16
    t.4 = this
    t.5 = p_node
    t.6 = c_node
    t.7 = [t.4+0]
    t.8 = [t.7+64]
    t.9 = call t.8(t.4 t.5 t.6)
    ntb = t.9
    goto :else_end16
  else16:
    t.10 = c_node

    t.11 = [t.10+0]
    t.12 = [t.11+28]
    t.13 = call t.12(t.10)
    if0 t.13 goto :else15
      t.14 = this
      t.15 = p_node
      t.16 = c_node
      t.17 = [t.14+0]
      t.18 = [t.17+60]
      t.19 = call t.18(t.14 t.15 t.16)
      ntb = t.19
      goto :else_end15
    else15:

      t.20 = c_node

      t.21 = [t.20+0]
      t.22 = [t.21+20]
      t.23 = call t.22(t.20)
      auxkey1 = t.23
      t.24 = p_node

      t.25 = [t.24+0]
      t.26 = [t.25+16]
      t.27 = call t.26(t.24)

      t.28 = [t.27+0]
      t.29 = [t.28+20]
      t.30 = call t.29(t.27)
      auxkey2 = t.30
      t.31 = this
      t.32 = auxkey1
      t.33 = auxkey2
      t.34 = [t.31+0]
      t.35 = [t.34+44]
      t.36 = call t.35(t.31 t.32 t.33)
      if0 t.36 goto :else14

        t.37 = p_node
        t.38 = [this+24]
        t.39 = [t.37+0]
        t.40 = [t.39+8]
        t.41 = call t.40(t.37 t.38)
        ntb = t.41
        t.42 = p_node
        t.43 = 0
        t.44 = [t.42+0]
        t.45 = [t.44+36]
        t.46 = call t.45(t.42 t.43)
        ntb = t.46
        goto :else_end14
      else14:

        t.47 = p_node
        t.48 = [this+24]
        t.49 = [t.47+0]
        t.50 = [t.49+4]
        t.51 = call t.50(t.47 t.48)
        ntb = t.51
        t.52 = p_node
        t.53 = 0
        t.54 = [t.52+0]
        t.55 = [t.54+40]
        t.56 = call t.55(t.52 t.53)
        ntb = t.56
      else_end14:
    else_end15:
  else_end16:
  t.57 = 1
  ret t.57
func Tree.RemoveRight(this p_node c_node)

  while2_top:
    t.0 = c_node

    t.1 = [t.0+0]
    t.2 = [t.1+28]
    t.3 = call t.2(t.0)
    if0 t.3 goto :else17

      t.4 = c_node
      t.5 = c_node

      t.6 = [t.5+0]
      t.7 = [t.6+12]
      t.8 = call t.7(t.5)

      t.9 = [t.8+0]
      t.10 = [t.9+20]
      t.11 = call t.10(t.8)
      t.12 = [t.4+0]
      t.13 = [t.12+24]
      t.14 = call t.13(t.4 t.11)
      ntb = t.14
      t.15 = c_node
      p_node = t.15
      t.16 = c_node

      t.17 = [t.16+0]
      t.18 = [t.17+12]
      t.19 = call t.18(t.16)
      c_node = t.19
      goto :else_end17
    else17:
      goto :while2_end
    else_end17:
    goto :while2_top
  while2_end:
  t.20 = p_node
  t.21 = [this+24]
  t.22 = [t.20+0]
  t.23 = [t.22+4]
  t.24 = call t.23(t.20 t.21)
  ntb = t.24
  t.25 = p_node
  t.26 = 0
  t.27 = [t.25+0]
  t.28 = [t.27+40]
  t.29 = call t.28(t.25 t.26)
  ntb = t.29
  t.30 = 1
  ret t.30
func Tree.RemoveLeft(this p_node c_node)

  while3_top:
    t.0 = c_node

    t.1 = [t.0+0]
    t.2 = [t.1+32]
    t.3 = call t.2(t.0)
    if0 t.3 goto :else18

      t.4 = c_node
      t.5 = c_node

      t.6 = [t.5+0]
      t.7 = [t.6+16]
      t.8 = call t.7(t.5)

      t.9 = [t.8+0]
      t.10 = [t.9+20]
      t.11 = call t.10(t.8)
      t.12 = [t.4+0]
      t.13 = [t.12+24]
      t.14 = call t.13(t.4 t.11)
      ntb = t.14
      t.15 = c_node
      p_node = t.15
      t.16 = c_node

      t.17 = [t.16+0]
      t.18 = [t.17+16]
      t.19 = call t.18(t.16)
      c_node = t.19
      goto :else_end18
    else18:
      goto :while3_end
    else_end18:
    goto :while3_top
  while3_end:
  t.20 = p_node
  t.21 = [this+24]
  t.22 = [t.20+0]
  t.23 = [t.22+8]
  t.24 = call t.23(t.20 t.21)
  ntb = t.24
  t.25 = p_node
  t.26 = 0
  t.27 = [t.25+0]
  t.28 = [t.27+36]
  t.29 = call t.28(t.25 t.26)
  ntb = t.29
  t.30 = 1
  ret t.30
func Tree.Search(this v_key)

  t.0 = this
  current_node = t.0
  t.1 = 1
  cont = t.1
  t.2 = 0
  ifound = t.2
  while4_top:
    t.3 = cont
    if0 t.3 goto :else23

      t.4 = current_node

      t.5 = [t.4+0]
      t.6 = [t.5+20]
      t.7 = call t.6(t.4)
      key_aux = t.7
      t.8 = v_key
      t.9 = key_aux
      t.10 = LtS(t.8 t.9)
      if0 t.10 goto :else22
        t.11 = current_node

        t.12 = [t.11+0]
        t.13 = [t.12+32]
        t.14 = call t.13(t.11)
        if0 t.14 goto :else19
          t.15 = current_node

          t.16 = [t.15+0]
          t.17 = [t.16+16]
          t.18 = call t.17(t.15)
          current_node = t.18
          goto :else_end19
        else19:
          t.19 = 0
          cont = t.19
        else_end19:
        goto :else_end22
      else22:
        t.20 = key_aux
        t.21 = v_key
        t.22 = LtS(t.20 t.21)
        if0 t.22 goto :else21
          t.23 = current_node

          t.24 = [t.23+0]
          t.25 = [t.24+28]
          t.26 = call t.25(t.23)
          if0 t.26 goto :else20
            t.27 = current_node

            t.28 = [t.27+0]
            t.29 = [t.28+12]
            t.30 = call t.29(t.27)
            current_node = t.30
            goto :else_end20
          else20:
            t.31 = 0
            cont = t.31
          else_end20:
          goto :else_end21
        else21:

          t.32 = 1
          ifound = t.32
          t.33 = 0
          cont = t.33
        else_end21:
      else_end22:
      goto :else_end23
    else23:
      goto :while4_end
    else_end23:
    goto :while4_top
  while4_end:
  t.34 = ifound
  ret t.34
func Tree.Print(this )

  t.0 = this
  current_node = t.0
  t.1 = this
  t.2 = current_node
  t.3 = [t.1+0]
  t.4 = [t.3+76]
  t.5 = call t.4(t.1 t.2)
  ntb = t.5
  t.6 = 1
  ret t.6
func Tree.RecPrint(this node)

  t.0 = node

  t.1 = [t.0+0]
  t.2 = [t.1+32]
  t.3 = call t.2(t.0)
  if0 t.3 goto :else24

    t.4 = this
    t.5 = node

    t.6 = [t.5+0]
    t.7 = [t.6+16]
    t.8 = call t.7(t.5)
    t.9 = [t.4+0]
    t.10 = [t.9+76]
    t.11 = call t.10(t.4 t.8)
    ntb = t.11
    goto :else_end24
  else24:
    t.12 = 1
    ntb = t.12
  else_end24:
  t.13 = node

  t.14 = [t.13+0]
  t.15 = [t.14+20]
  t.16 = call t.15(t.13)
  PrintIntS(t.16)
  t.17 = node

  t.18 = [t.17+0]
  t.19 = [t.18+28]
  t.20 = call t.19(t.17)
  if0 t.20 goto :else25

    t.21 = this
    t.22 = node

    t.23 = [t.22+0]
    t.24 = [t.23+12]
    t.25 = call t.24(t.22)
    t.26 = [t.21+0]
    t.27 = [t.26+76]
    t.28 = call t.27(t.21 t.25)
    ntb = t.28
    goto :else_end25
  else25:
    t.29 = 1
    ntb = t.29
  else_end25:
  t.30 = 1
  ret t.30
func Tree.accept(this v)

  t.0 = 333
  PrintIntS(t.0)
  t.1 = v
  t.2 = this
  t.3 = [t.1+0]
  t.4 = [t.3+0]
  t.5 = call t.4(t.1 t.2)
  nti = t.5
  t.6 = 0
  ret t.6

func Visitor.visit(this n)

  t.0 = n

  t.1 = [t.0+0]
  t.2 = [t.1+28]
  t.3 = call t.2(t.0)
  if0 t.3 goto :else26

    t.4 = n

    t.5 = [t.4+0]
    t.6 = [t.5+12]
    t.7 = call t.6(t.4)
    [this+8] = t.7
    t.8 = [this+8]
    t.9 = this
    t.10 = [t.8+0]
    t.11 = [t.10+80]
    t.12 = call t.11(t.8 t.9)
    nti = t.12
    goto :else_end26
  else26:
    t.13 = 0
    nti = t.13
  else_end26:
  t.14 = n

  t.15 = [t.14+0]
  t.16 = [t.15+32]
  t.17 = call t.16(t.14)
  if0 t.17 goto :else27

    t.18 = n

    t.19 = [t.18+0]
    t.20 = [t.19+16]
    t.21 = call t.20(t.18)
    [this+4] = t.21
    t.22 = [this+4]
    t.23 = this
    t.24 = [t.22+0]
    t.25 = [t.24+80]
    t.26 = call t.25(t.22 t.23)
    nti = t.26
    goto :else_end27
  else27:
    t.27 = 0
    nti = t.27
  else_end27:
  t.28 = 0
  ret t.28

func MyVisitor.visit(this n)

  t.0 = n

  t.1 = [t.0+0]
  t.2 = [t.1+28]
  t.3 = call t.2(t.0)
  if0 t.3 goto :else28

    t.4 = n

    t.5 = [t.4+0]
    t.6 = [t.5+12]
    t.7 = call t.6(t.4)
    [this+8] = t.7
    t.8 = [this+8]
    t.9 = this
    t.10 = [t.8+0]
    t.11 = [t.10+80]
    t.12 = call t.11(t.8 t.9)
    nti = t.12
    goto :else_end28
  else28:
    t.13 = 0
    nti = t.13
  else_end28:
  t.14 = n

  t.15 = [t.14+0]
  t.16 = [t.15+20]
  t.17 = call t.16(t.14)
  PrintIntS(t.17)
  t.18 = n

  t.19 = [t.18+0]
  t.20 = [t.19+32]
  t.21 = call t.20(t.18)
  if0 t.21 goto :else29

    t.22 = n

    t.23 = [t.22+0]
    t.24 = [t.23+16]
    t.25 = call t.24(t.22)
    [this+4] = t.25
    t.26 = [this+4]
    t.27 = this
    t.28 = [t.26+0]
    t.29 = [t.28+80]
    t.30 = call t.29(t.26 t.27)
    nti = t.30
    goto :else_end29
  else29:
    t.31 = 0
    nti = t.31
  else_end29:
  t.32 = 0
  ret t.32
func AllocArray(size)
  bytes = MulS(size 4)
  bytes = Add(bytes 4)
  v = HeapAllocZ(bytes)
  [v] = size
  ret v
